It would be nice to reduce the verbosity:

		  val get = Engine2[List[Int], Int, Int](0);
		
		  get constraint (List(7, 10, 4, 3), 0,
		    expected = 7,
		    code = (rolls: List[Int], i: Int) => rolls(i),
		    because = (rolls: List[Int], i: Int) => i >= 0 && i < rolls.length)
		
		  get assertion (List(7, 10, 4, 3), -1, 0)
		  
Could become

 val get = Engine2( (rolls: List[Int], i: Int) =>0;
		
		  get constraint (List(7, 10, 4, 3), 1,
		    expected = 7,
		    code =  rolls(i),
		
		  get assertion (List(7, 10, 4, 3), -1, 0)
		    because = i >= 0 && i < rolls.length)
		    
This might be done by bring rolls and i in as implicits, and then munging the AST to turn these into functions.
The code and the 'toString' will be much better, but the complexity is higher


Maven plugin
Need to be able to execute these junit tests within maven

